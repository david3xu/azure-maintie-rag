name: MaintIE RAG CI

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop, feature/** ]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_API_BASE: ${{ secrets.OPENAI_API_BASE }}
      OPENAI_DEPLOYMENT_NAME: ${{ secrets.OPENAI_DEPLOYMENT_NAME }}
      EMBEDDING_DEPLOYMENT_NAME: ${{ secrets.EMBEDDING_DEPLOYMENT_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov requests
          pip install black isort flake8

      - name: Run code quality checks
        run: |
          black --check .
          isort --check-only .
          flake8 .

      - name: Run all tests with Azure integration
        run: |
          PYTHONPATH=. pytest --cov=src tests/

      - name: Run comprehensive system test suite
        run: |
          PYTHONPATH=. pytest tests/comprehensive_test_suite.py -v

      - name: Run comprehensive GNN trainer CLI (smoke test)
        run: |
          python scripts/train_comprehensive_gnn.py --config scripts/example_comprehensive_gnn_config.json --n_trials 1 --k_folds 2

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/htmlcov/
        if: always()

frontend-test:
  runs-on: ubuntu-latest
  defaults:
    run:
      working-directory: frontend
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Run frontend tests
      run: npm run test:ci || echo "Frontend tests not yet configured"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
      if: always()

docker-test:
  needs: [test, frontend-test]
  runs-on: ubuntu-latest
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create environment file
      run: |
        cp backend/config/environment_example.env .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "OPENAI_API_BASE=${{ secrets.OPENAI_API_BASE }}" >> .env

    - name: Build Docker images
      run: make docker-up

    - name: Wait for services
      run: sleep 30

    - name: Test service health
      run: make health

    - name: Clean up
      run: make docker-down
      if: always()

security-scan:
  needs: [test, frontend-test]
  runs-on: ubuntu-latest
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Python security scan
      run: |
        cd backend
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r src/ -f json -o security-report.json

    - name: Run npm security audit
      run: |
        cd frontend
        npm audit --audit-level moderate

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: backend/security-report.json
      if: always()

performance-test:
  needs: [test, frontend-test]
  runs-on: ubuntu-latest
  if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run performance tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_API_BASE: ${{ secrets.OPENAI_API_BASE }}
      run: |
        cd backend
        PYTHONPATH=. python scripts/real_query_flow_script.py > performance-report.txt

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: backend/performance-report.txt

monitoring-test:
  needs: [test]
  runs-on: ubuntu-latest
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test monitoring system
      run: |
        cd backend
        make debug-monitoring

    - name: Validate monitoring metrics
      run: |
        cd backend
        PYTHONPATH=. python -c "
from src.monitoring.pipeline_monitor import PipelineMonitor
monitor = PipelineMonitor()
print('Monitoring system validated successfully')
"