# Azure Developer CLI (azd) configuration for Universal RAG System
name: azure-maintie-rag
metadata:
  template: azure-search-openai-demo@main
  description: "Azure Universal RAG system with knowledge graphs, vector search, and GNN training"

# Services configuration for azd deployment
services:
  backend:
    project: .
    language: python
    host: containerapp
  frontend:
    project: ./frontend
    language: js
    host: containerapp

# Infrastructure configuration
infra:
  provider: bicep
  path: ./infra

# Environment variables that will be set by azd
env:
  # Azure Resource Configuration
  AZURE_LOCATION: westus2
  AZURE_RESOURCE_GROUP_PREFIX: rg-maintie-rag
  
  # Application Configuration
  OPENAI_MODEL_DEPLOYMENT: gpt-4o
  EMBEDDING_MODEL_DEPLOYMENT: text-embedding-ada-002
  SEARCH_INDEX_NAME: maintie-index
  COSMOS_DATABASE_NAME: maintie-rag-db
  COSMOS_GRAPH_NAME: knowledge-graph
  
  # Container Configuration
  BACKEND_PORT: 8000
  
  # Data Pipeline Configuration
  AUTO_POPULATE_DATA: true  # Set to false to skip automated data pipeline

# Deployment hooks
hooks:
  preprovision:
    shell: sh
    run: |
      echo "🏗️ Preparing Azure Universal RAG deployment..."
      echo "Environment: ${AZURE_ENV_NAME}"
      echo "Location: ${AZURE_LOCATION}"
      
  postprovision:
    shell: sh
    run: |
      echo "✅ Infrastructure provisioned successfully!"
      echo ""
      echo "🔍 Checking deployed resources..."
      
      # Get resource group info
      RESOURCE_GROUP="rg-maintie-rag-${AZURE_ENV_NAME}"
      echo "Resource Group: $RESOURCE_GROUP"
      
      # List key resources
      echo ""
      echo "📦 Key Resources:"
      az resource list --resource-group "$RESOURCE_GROUP" --query "[].{Name:name, Type:type}" -o table 2>/dev/null || echo "Unable to list resources"
      
      echo ""
      
      # Check if automated data pipeline is enabled
      if [ "${AUTO_POPULATE_DATA:-true}" != "true" ]; then
        echo "⏭️  Automated data pipeline disabled (AUTO_POPULATE_DATA=false)"
        echo "💡 Run 'make dataflow-full' manually to populate data"
        echo ""
        echo "✅ Infrastructure ready for manual data population"
        exit 0
      fi
      
      echo "🧹 Starting automated data pipeline preparation..."
      
      # Set environment variables for Python scripts
      export PYTHONPATH=$PWD
      export USE_MANAGED_IDENTITY=false
      export OPENBLAS_NUM_THREADS=1
      
      # Phase 0: Cleanup existing data in Azure services
      echo "📋 Phase 0: Cleaning up existing Azure data..."
      if python scripts/dataflow/phase0_cleanup/00_01_cleanup_all_services.py; then
        echo "✅ Phase 0: Data cleanup completed"
      else
        echo "⚠️  Phase 0: Cleanup failed, continuing anyway"
      fi
      
      # Phase 1: Validate all agents are working
      echo "📋 Phase 1: Validating PydanticAI agents..."
      if python scripts/dataflow/phase1_validation/01_01_validate_domain_intelligence.py && \
         python scripts/dataflow/phase1_validation/01_02_validate_knowledge_extraction.py && \
         python scripts/dataflow/phase1_validation/01_03_validate_universal_search.py; then
        echo "✅ Phase 1: All 3 agents validated successfully"
      else
        echo "❌ Phase 1: Agent validation failed - manual intervention required"
        exit 1
      fi
      
      # Phase 2: Upload documents and create embeddings
      echo "📋 Phase 2: Uploading Azure AI documents and creating embeddings..."
      if python scripts/dataflow/phase2_ingestion/02_02_storage_upload_primary.py && \
         python scripts/dataflow/phase2_ingestion/02_03_vector_embeddings.py && \
         python scripts/dataflow/phase2_ingestion/02_04_search_indexing.py; then
        echo "✅ Phase 2: Document ingestion completed"
      else
        echo "❌ Phase 2: Document ingestion failed - manual intervention required"
        exit 1
      fi
      
      # Phase 3: Run Agent 1 (Domain Intelligence) to prepare for tri-modal search
      echo "📋 Phase 3: Running Agent 1 (Domain Intelligence) to build database..."
      if python scripts/dataflow/phase3_knowledge/03_01_basic_entity_extraction.py && \
         python scripts/dataflow/phase3_knowledge/03_02_graph_storage.py; then
        echo "✅ Phase 3: Knowledge extraction and graph storage completed"
        echo "🎯 Agent 1 has prepared the database - tri-modal search is ready!"
      else
        echo "❌ Phase 3: Knowledge extraction failed - manual intervention required"
        exit 1
      fi
      
      echo ""
      echo "🎉 AUTOMATED PIPELINE COMPLETED SUCCESSFULLY!"
      echo "✅ Infrastructure deployed and configured"
      echo "✅ All Azure services cleaned and populated with fresh data"  
      echo "✅ Agent 1 has analyzed all documents and built knowledge database"
      echo "✅ Tri-modal search (Vector + Graph + GNN) is ready for user queries"
      echo ""
      echo "💡 The system is now ready for production use!"
      echo "💡 User queries will skip Agent 1 and use pre-analyzed data for fast responses"
      
  postdeploy:
    shell: sh
    run: |
      echo "✅ Deployment complete!"
      echo ""
      echo "🔗 Getting deployment URLs..."
      
      # Run our working URL script
      if [ -f "./scripts/show-deployment-urls.sh" ]; then
        ./scripts/show-deployment-urls.sh
      else
        echo "📍 Use this command to get URLs: ./scripts/show-deployment-urls.sh"
      fi
      
      echo ""
      echo "📊 Environment: ${AZURE_ENV_NAME}"
      echo "💡 Chat interface is ready for testing!"