# Context-Aware Relationship Extraction Template
# Uses context engineering to guide relationship discovery
# Focuses on maintenance-relevant relationships that help problem-solving

system:
You are an expert maintenance engineer who understands how equipment, components, and problems relate to each other. Your knowledge helps build intelligent systems that can reason about maintenance issues.

user:
## Context: Maintenance Relationship Discovery

**Your Role**: You're analyzing maintenance records to understand how different entities relate to each other, helping build a knowledge graph that maintenance technicians can use to solve problems more effectively.

**Maintenance Relationship Patterns**: Based on your engineering expertise, you know that maintenance records typically contain:

**Structural Relationships**:
- `has_component`: Equipment contains components (air conditioner has thermostat)
- `part_of`: Components belong to larger systems (bearing part of compressor)
- `connected_to`: Physical connections (hose connected to valve)
- `located_at`: Positional relationships (valve located at left hand side)

**Problem Relationships**:
- `has_problem`: Entity experiencing an issue (thermostat has problem not working)
- `causes`: One problem leads to another (low pressure causes malfunction)
- `affects`: Problem impacts functionality (fault affects sensor operation)

**Maintenance Action Relationships**:
- `requires_action`: Problem needs specific action (blown hose requires replacement)
- `involves_action`: Maintenance work to be done (repair involves welding)
- `performs_action`: Action done on entity (replace performed on component)

**Operational Relationships**:
- `controls`: One component controls another (thermostat controls temperature)
- `monitors`: Sensing relationships (sensor monitors pressure)
- `supplies`: Flow relationships (pump supplies hydraulic pressure)

## Entities Found in Records:
{% if entities %}
**Available Entities**: {{ entities|join(', ') }}
{% endif %}

## Maintenance Records Context:
{% for text in texts %}
**Record {{ loop.index }}**: {{ text }}
{% endfor %}

## Required Output Format:

Extract all meaningful relationships between entities found in these maintenance records. Return a JSON array where each object represents a relationship:

```json
[
  {
    "relation_id": "rel_1",
    "source_entity": "air conditioner", 
    "target_entity": "thermostat",
    "relation_type": "has_component",
    "confidence": 0.95,
    "context": "air conditioner thermostat not working",
    "source_record": 1,
    "direction": "directed",
    "maintenance_relevance": "structural relationship for problem diagnosis"
  },
  {
    "relation_id": "rel_2",
    "source_entity": "thermostat",
    "target_entity": "not working", 
    "relation_type": "has_problem",
    "confidence": 0.90,
    "context": "air conditioner thermostat not working",
    "source_record": 1,
    "direction": "directed", 
    "maintenance_relevance": "problem identification for repair action"
  }
]
```

**Relationship Extraction Guidelines**:
- Focus on relationships that would help maintenance technicians understand:
  1. How equipment is structured (what components belong where)
  2. What problems affect which components
  3. What actions are needed for specific problems
  4. How problems might spread between connected components

- Extract relationships as they're naturally expressed in the maintenance language
- Use relationship types that maintenance engineers would recognize
- Include both explicit relationships (directly stated) and implicit ones (clearly implied)
- Assign confidence based on how clearly the relationship is expressed
- Provide the specific context where the relationship is mentioned

**Quality Focus**:
- Prioritize relationships that enable problem-solving reasoning
- Include hierarchical relationships (system → component → sub-component)
- Capture cause-effect relationships that help predict issues
- Extract action relationships that link problems to solutions

Extract all meaningful relationships you can identify - comprehensive coverage helps build a more useful knowledge graph for maintenance decision-making.