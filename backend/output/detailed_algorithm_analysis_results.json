{
  "query": "pump bearing failure",
  "main_steps": {
    "1": {
      "step": "Component Validation",
      "component": "MaintIEStructuredRAG.__init__()",
      "input": "Structured RAG initialization",
      "output": "components_initialized: True",
      "technology": "Python class initialization",
      "real_output": "components_initialized: True"
    },
    "2": {
      "step": "Component Initialization",
      "component": "initialize_components()",
      "input": "force_rebuild=False",
      "output": "Init results: ['data_transformer', 'query_analyzer', 'vector_search', 'llm_interface', 'knowledge_loaded', 'total_documents', 'total_entities', 'index_built', 'total_relations', 'gold_stats', 'silver_...",
      "technology": "Component dependency injection",
      "real_output": "Init results: ['data_transformer', 'query_analyzer', 'vector_search', 'llm_interface', 'knowledge_loaded', 'total_documents', 'total_entities', 'index_built', 'total_relations', 'gold_stats', 'silver_stats', 'graph_nodes', 'graph_edges'], took 10.70s"
    }
  },
  "detailed_algorithms": {
    "1": {
      "main_step": "Query Analysis",
      "sub_step": "3a.1",
      "algorithm_name": "Query Normalization",
      "algorithm_type": "Text Processing (re.sub + domain abbreviations)",
      "implementation": "_normalize_query()",
      "input": "pump bearing failure",
      "output": "pump bearing failure",
      "processing_time_ms": 0.5884170532226562,
      "real_output": "pump bearing failure"
    },
    "2": {
      "main_step": "Query Analysis",
      "sub_step": "3a.2",
      "algorithm_name": "Entity Extraction",
      "algorithm_type": "Regex Pattern Matching + Domain Vocabulary",
      "implementation": "_extract_entities()",
      "input": "pump bearing failure",
      "output": "['pump', 'bearing', 'failure']",
      "processing_time_ms": 2.543926239013672,
      "real_output": [
        "pump",
        "bearing",
        "failure"
      ]
    },
    "3": {
      "main_step": "Query Analysis",
      "sub_step": "3a.3",
      "algorithm_name": "Query Classification",
      "algorithm_type": "Domain Knowledge Keywords + Pattern Matching",
      "implementation": "_classify_query_type()",
      "input": "pump bearing failure",
      "output": "QueryType.TROUBLESHOOTING",
      "processing_time_ms": 0.5922317504882812,
      "real_output": "troubleshooting"
    },
    "4": {
      "main_step": "Query Analysis",
      "sub_step": "3a.4",
      "algorithm_name": "Equipment Categorization",
      "algorithm_type": "Equipment Hierarchy Lookup + Domain Knowledge",
      "implementation": "_identify_equipment_category()",
      "input": "['pump', 'bearing', 'failure']",
      "output": "rotating_equipment",
      "processing_time_ms": 0.010728836059570312,
      "real_output": "rotating_equipment"
    },
    "5": {
      "main_step": "Query Analysis",
      "sub_step": "3a.5",
      "algorithm_name": "Safety Assessment Algorithm",
      "algorithm_type": "Safety Critical Equipment Lookup + Domain Rules",
      "implementation": "_assess_safety_criticality()",
      "input": "entities=['pump', 'bearing', 'failure'], query_type=troubleshooting",
      "output": "{'is_safety_critical': True, 'safety_level': 'high', 'critical_equipment': ['pump'], 'safety_warnings': ['Follow lockout/tagout procedures before work...",
      "processing_time_ms": 0.023603439331054688,
      "real_output": {
        "is_safety_critical": true,
        "safety_level": "high",
        "critical_equipment": [
          "pump"
        ],
        "safety_warnings": [
          "Follow lockout/tagout procedures before work",
          "Use appropriate personal protective equipment",
          "Ensure proper ventilation and gas monitoring",
          "Verify equipment is safely isolated before troubleshooting"
        ]
      }
    },
    "6": {
      "main_step": "Query Analysis",
      "sub_step": "3a.6",
      "algorithm_name": "Concept Expansion Algorithm",
      "algorithm_type": "GNN Domain Context + Equipment Hierarchy Rules",
      "implementation": "_enhanced_expand_concepts()",
      "input": "['pump', 'bearing', 'failure']",
      "output": "33 concepts",
      "processing_time_ms": 49.83353614807129,
      "real_output": "33 concepts"
    },
    "7": {
      "main_step": "Query Analysis",
      "sub_step": "3a.7",
      "algorithm_name": "Related Entity Finding",
      "algorithm_type": "NetworkX Graph Traversal (neighbors + shortest_path)",
      "implementation": "_find_related_entities()",
      "input": "['pump', 'bearing', 'failure']",
      "output": "['investigate', 'pedestal bearing', 'heater', 'leak', 'hose', 'not working', 'gauge', 'door', 'seat', 'operators seat']",
      "processing_time_ms": 2.785921096801758,
      "real_output": [
        "investigate",
        "pedestal bearing",
        "heater",
        "leak",
        "hose",
        "not working",
        "gauge",
        "door",
        "seat",
        "operators seat"
      ]
    },
    "8": {
      "main_step": "Vector Search",
      "sub_step": "4a.1",
      "algorithm_name": "Structured Query Building",
      "algorithm_type": "Query Concatenation + Domain Prioritization",
      "implementation": "_build_structured_search()",
      "input": "entities + concepts",
      "output": "pump grease roller bearing malfunction centrifugal pump failure breakdown lubrication ball bearing positive displacement pump bearing",
      "processing_time_ms": 0.0002384185791015625,
      "real_output": "pump grease roller bearing malfunction centrifugal pump failure breakdown lubrication ball bearing positive displacement pump bearing"
    },
    "9": {
      "main_step": "Vector Search",
      "sub_step": "4a.2",
      "algorithm_name": "Azure OpenAI Embedding Generation",
      "algorithm_type": "AzureOpenAI.embeddings.create() + L2 Normalization",
      "implementation": "vector_search.search() -> embeddings.create()",
      "input": "pump grease roller bearing malfunction centrifugal pump failure breakdown lubrication ball bearing positive displacement pump bearing",
      "output": "1536-dim embedding generated",
      "processing_time_ms": 993.1681156158447,
      "real_output": "1536-dim embedding generated"
    },
    "10": {
      "main_step": "Vector Search",
      "sub_step": "4a.3",
      "algorithm_name": "FAISS Vector Search",
      "algorithm_type": "FAISS IndexFlatIP + Cosine Similarity",
      "implementation": "faiss.IndexFlatIP.search()",
      "input": "normalized embedding",
      "output": "20 results, top score: 0.841",
      "processing_time_ms": 0.0030994415283203125,
      "real_output": "20 results, top score: 0.841"
    },
    "11": {
      "main_step": "Graph Enhancement",
      "sub_step": "5a.1",
      "algorithm_name": "Entity Scoring Algorithm (REAL)",
      "algorithm_type": "Real Entity-Document Index Lookup",
      "implementation": "entity_index.get_entities_for_document()",
      "input": "doc_ids: ['doc_4722', 'doc_4887', 'doc_3255']",
      "output": "doc_entities: [[], [], []]",
      "processing_time_ms": 0.020265579223632812,
      "real_output": "doc_entities: [[], [], []]"
    },
    "12": {
      "main_step": "Graph Enhancement",
      "sub_step": "5a.2",
      "algorithm_name": "Graph Ranker Enhancement (REAL)",
      "algorithm_type": "Real NetworkX Graph Operations + Weighted Fusion",
      "implementation": "graph_ranker.enhance_ranking()",
      "input": "20 search results",
      "output": "Enhanced 20 results",
      "processing_time_ms": 0.2970695495605469,
      "real_output": "Enhanced 20 results"
    },
    "13": {
      "main_step": "Graph Enhancement",
      "sub_step": "5a.3",
      "algorithm_name": "Knowledge Graph Analysis (REAL)",
      "algorithm_type": "NetworkX Graph Analysis",
      "implementation": "data_transformer.knowledge_graph",
      "input": "graph connectivity check",
      "output": "nodes: 24464, edges: 17412",
      "processing_time_ms": 9.973287582397461,
      "real_output": "nodes: 24464, edges: 17412"
    }
  },
  "timing_analysis": {
    "total_steps": 2,
    "total_algorithms": 13,
    "processing_time": 1.0605039596557617,
    "confidence": 0.89,
    "success": true
  }
}