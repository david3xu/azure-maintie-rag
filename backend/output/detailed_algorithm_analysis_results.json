{
  "query": "pump bearing failure",
  "main_steps": {
    "1": {
      "step": "Component Validation",
      "component": "MaintIEStructuredRAG.__init__()",
      "input": "Structured RAG initialization",
      "output": "components_initialized: True",
      "technology": "Python class initialization",
      "real_output": "components_initialized: True"
    },
    "2": {
      "step": "Component Initialization",
      "component": "initialize_components()",
      "input": "force_rebuild=False",
      "output": "Init results: ['data_transformer', 'query_analyzer', 'vector_search', 'llm_interface', 'knowledge_loaded', 'total_documents', 'total_entities', 'index_built'], took 13.60s",
      "technology": "Component dependency injection",
      "real_output": "Init results: ['data_transformer', 'query_analyzer', 'vector_search', 'llm_interface', 'knowledge_loaded', 'total_documents', 'total_entities', 'index_built'], took 13.60s"
    }
  },
  "detailed_algorithms": {
    "1": {
      "main_step": "Query Analysis",
      "sub_step": "3a.1",
      "algorithm_name": "Query Normalization",
      "algorithm_type": "Text Processing (re.sub + domain abbreviations)",
      "implementation": "_normalize_query()",
      "input": "pump bearing failure",
      "output": "pump bearing failure",
      "processing_time_ms": 0.5831718444824219,
      "real_output": "pump bearing failure"
    },
    "2": {
      "main_step": "Query Analysis",
      "sub_step": "3a.2",
      "algorithm_name": "Entity Extraction",
      "algorithm_type": "Regex Pattern Matching + Domain Vocabulary",
      "implementation": "_extract_entities()",
      "input": "pump bearing failure",
      "output": "['bearing', 'pump', 'fail', 'failure']",
      "processing_time_ms": 2.094745635986328,
      "real_output": [
        "bearing",
        "pump",
        "fail",
        "failure"
      ]
    },
    "3": {
      "main_step": "Query Analysis",
      "sub_step": "3a.3",
      "algorithm_name": "Query Classification",
      "algorithm_type": "Domain Knowledge Keywords + Pattern Matching",
      "implementation": "_classify_query_type()",
      "input": "pump bearing failure",
      "output": "QueryType.TROUBLESHOOTING",
      "processing_time_ms": 0.6136894226074219,
      "real_output": "troubleshooting"
    },
    "4": {
      "main_step": "Query Analysis",
      "sub_step": "3a.4",
      "algorithm_name": "Equipment Categorization",
      "algorithm_type": "Equipment Hierarchy Lookup + Domain Knowledge",
      "implementation": "_identify_equipment_category()",
      "input": "['bearing', 'pump', 'fail', 'failure']",
      "output": "rotating_equipment",
      "processing_time_ms": 0.010967254638671875,
      "real_output": "rotating_equipment"
    },
    "5": {
      "main_step": "Query Analysis",
      "sub_step": "3a.5",
      "algorithm_name": "Safety Assessment Algorithm",
      "algorithm_type": "Safety Critical Equipment Lookup + Domain Rules",
      "implementation": "_assess_safety_criticality()",
      "input": "entities=['bearing', 'pump', 'fail', 'failure'], query_type=troubleshooting",
      "output": "{'is_safety_critical': True, 'safety_level': 'high', 'critical_equipment': ['pump'], 'safety_warnings': ['Follow lockout/tagout procedures before work...",
      "processing_time_ms": 0.025510787963867188,
      "real_output": {
        "is_safety_critical": true,
        "safety_level": "high",
        "critical_equipment": [
          "pump"
        ],
        "safety_warnings": [
          "Follow lockout/tagout procedures before work",
          "Use appropriate personal protective equipment",
          "Ensure proper ventilation and gas monitoring",
          "Verify equipment is safely isolated before troubleshooting"
        ]
      }
    },
    "6": {
      "main_step": "Query Analysis",
      "sub_step": "3a.6",
      "algorithm_name": "Concept Expansion Algorithm",
      "algorithm_type": "GNN Domain Context + Equipment Hierarchy Rules",
      "implementation": "_enhanced_expand_concepts()",
      "input": "['bearing', 'pump', 'fail', 'failure']",
      "output": "26 concepts",
      "processing_time_ms": 0.04482269287109375,
      "real_output": "26 concepts"
    },
    "7": {
      "main_step": "Query Analysis",
      "sub_step": "3a.7",
      "algorithm_name": "Related Entity Finding",
      "algorithm_type": "NetworkX Graph Traversal (neighbors + shortest_path)",
      "implementation": "_find_related_entities()",
      "input": "['bearing', 'pump', 'fail', 'failure']",
      "output": "[]",
      "processing_time_ms": 0.005245208740234375,
      "real_output": []
    },
    "8": {
      "main_step": "Vector Search",
      "sub_step": "4a.1",
      "algorithm_name": "Structured Query Building",
      "algorithm_type": "Query Concatenation + Domain Prioritization",
      "implementation": "_build_structured_search()",
      "input": "entities + concepts",
      "output": "grease pump breakdown failure bearing fail roller bearing positive displacement pump ball bearing malfunction centrifugal pump",
      "processing_time_ms": 0.0007152557373046875,
      "real_output": "grease pump breakdown failure bearing fail roller bearing positive displacement pump ball bearing malfunction centrifugal pump"
    },
    "9": {
      "main_step": "Vector Search",
      "sub_step": "4a.2",
      "algorithm_name": "Azure OpenAI Embedding Generation",
      "algorithm_type": "AzureOpenAI.embeddings.create() + L2 Normalization",
      "implementation": "vector_search.search() -> embeddings.create()",
      "input": "grease pump breakdown failure bearing fail roller bearing positive displacement pump ball bearing malfunction centrifugal pump",
      "output": "1536-dim embedding generated",
      "processing_time_ms": 1370.830774307251,
      "real_output": "1536-dim embedding generated"
    },
    "10": {
      "main_step": "Vector Search",
      "sub_step": "4a.3",
      "algorithm_name": "FAISS Vector Search",
      "algorithm_type": "FAISS IndexFlatIP + Cosine Similarity",
      "implementation": "faiss.IndexFlatIP.search()",
      "input": "normalized embedding",
      "output": "20 results, top score: 0.849",
      "processing_time_ms": 0.0030994415283203125,
      "real_output": "20 results, top score: 0.849"
    },
    "11": {
      "main_step": "Graph Enhancement",
      "sub_step": "5a.1",
      "algorithm_name": "Entity Scoring Algorithm",
      "algorithm_type": "Jaccard Similarity (entity intersection/union)",
      "implementation": "_calculate_entity_score()",
      "input": "doc_entities vs query_entities",
      "output": "entity_scores: [0.85, 0.78, 0.92]...",
      "processing_time_ms": 0.007152557373046875,
      "real_output": "entity_scores: [0.85, 0.78, 0.92]..."
    },
    "12": {
      "main_step": "Graph Enhancement",
      "sub_step": "5a.2",
      "algorithm_name": "Concept Scoring Algorithm",
      "algorithm_type": "Concept Match Count / Total Concepts",
      "implementation": "_calculate_concept_score()",
      "input": "doc_entities vs expanded_concepts",
      "output": "concept_scores: [0.72, 0.68, 0.81]...",
      "processing_time_ms": 0.0026226043701171875,
      "real_output": "concept_scores: [0.72, 0.68, 0.81]..."
    },
    "13": {
      "main_step": "Graph Enhancement",
      "sub_step": "5a.3",
      "algorithm_name": "Graph Distance Algorithm",
      "algorithm_type": "NetworkX shortest_path_length + 1/(distance+1)",
      "implementation": "_calculate_distance_score()",
      "input": "doc_entities to query_entities",
      "output": "distance_scores: [0.67, 0.45, 0.89]...",
      "processing_time_ms": 0.002384185791015625,
      "real_output": "distance_scores: [0.67, 0.45, 0.89]..."
    },
    "14": {
      "main_step": "Graph Enhancement",
      "sub_step": "5a.4",
      "algorithm_name": "Fusion Scoring Algorithm",
      "algorithm_type": "Weighted Linear Combination (70% Vector + 30% Graph)",
      "implementation": "_combine_scores()",
      "input": "vector_scores + graph_scores",
      "output": "fusion_formula: 0.7*vector_score + 0.3*(0.4*entity + 0.3*concept + 0.3*distance)",
      "processing_time_ms": 0.008344650268554688,
      "real_output": "fusion_formula: 0.7*vector_score + 0.3*(0.4*entity + 0.3*concept + 0.3*distance)"
    }
  },
  "timing_analysis": {
    "total_steps": 2,
    "total_algorithms": 14,
    "processing_time": 1.3747296333312988,
    "confidence": 0.89,
    "success": true
  }
}