#!/usr/bin/env python3
"""
Local Environment Setup Script
Configures local development environment for real Azure services testing
"""

import os
import subprocess
import sys
from pathlib import Path
from typing import Dict, List, Optional

def run_command(command: str, description: str) -> bool:
    """Run a shell command and return success status"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} completed")
            if result.stdout.strip():
                print(f"   Output: {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå {description} failed")
            if result.stderr.strip():
                print(f"   Error: {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå {description} failed with exception: {e}")
        return False

def check_azure_cli() -> bool:
    """Check if Azure CLI is installed and user is logged in"""
    print("üîç Checking Azure CLI...")
    
    # Check if az command exists
    if not run_command("az --version", "Checking Azure CLI installation"):
        print("‚ùå Azure CLI not found. Install it from: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli")
        return False
    
    # Check if user is logged in
    if not run_command("az account show", "Checking Azure CLI login status"):
        print("‚ùå Not logged into Azure CLI. Run: az login")
        return False
    
    return True

def get_subscription_info() -> Optional[Dict[str, str]]:
    """Get current Azure subscription information"""
    try:
        result = subprocess.run("az account show --query '{id:id, name:name, tenantId:tenantId}' -o json", 
                              shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            import json
            return json.loads(result.stdout)
        return None
    except Exception as e:
        print(f"Error getting subscription info: {e}")
        return None

def create_service_principal(subscription_id: str, resource_group: str = None) -> Optional[Dict[str, str]]:
    """Create service principal for local development"""
    print("üîß Creating service principal for local development...")
    
    scope = f"/subscriptions/{subscription_id}"
    if resource_group:
        scope += f"/resourceGroups/{resource_group}"
    
    command = f"""az ad sp create-for-rbac \
        --name "azure-universal-rag-local" \
        --role "Contributor" \
        --scopes "{scope}" \
        --query '{{clientId:appId, clientSecret:password, tenantId:tenant}}' \
        -o json"""
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            import json
            sp_info = json.loads(result.stdout)
            print("‚úÖ Service principal created successfully")
            return sp_info
        else:
            print(f"‚ùå Failed to create service principal: {result.stderr}")
            return None
    except Exception as e:
        print(f"‚ùå Error creating service principal: {e}")
        return None

def create_env_file(sp_info: Dict[str, str], subscription_id: str) -> bool:
    """Create .env file with Azure configuration"""
    env_file = Path(".env")
    
    env_content = f"""# Azure Universal RAG - Local Development Environment
# Generated by setup_local_environment.py

# Azure Authentication
AZURE_CLIENT_ID={sp_info['clientId']}
AZURE_CLIENT_SECRET={sp_info['clientSecret']}
AZURE_TENANT_ID={sp_info['tenantId']}
AZURE_SUBSCRIPTION_ID={subscription_id}

# Azure Services (UPDATE THESE WITH YOUR SERVICE ENDPOINTS)
AZURE_OPENAI_ENDPOINT=https://your-openai-instance.openai.azure.com/
AZURE_OPENAI_API_VERSION=2024-08-01-preview
AZURE_SEARCH_ENDPOINT=https://your-search-service.search.windows.net
AZURE_SEARCH_API_VERSION=2024-07-01
AZURE_COSMOS_ENDPOINT=https://your-cosmos-account.gremlin.cosmosdb.azure.com:443/
AZURE_STORAGE_ACCOUNT=yourstorageaccount
AZURE_ML_WORKSPACE_NAME=your-ml-workspace

# Environment Configuration
AZURE_ENV_NAME=local-development
LOG_LEVEL=INFO
PYTHONPATH={Path.cwd()}

# Performance Settings
MAX_CONCURRENT_REQUESTS=10
CACHE_TTL_SECONDS=3600
REQUEST_TIMEOUT_SECONDS=30
"""
    
    try:
        with open(env_file, "w") as f:
            f.write(env_content)
        
        print(f"‚úÖ Created {env_file} with Azure configuration")
        print("‚ö†Ô∏è  IMPORTANT: Update the Azure service endpoints in .env with your actual values")
        return True
    except Exception as e:
        print(f"‚ùå Failed to create .env file: {e}")
        return False

def setup_python_environment() -> bool:
    """Set up Python environment and dependencies"""
    print("üîß Setting up Python environment...")
    
    # Check Python version
    if sys.version_info < (3, 10):
        print(f"‚ùå Python 3.10+ required, found {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detected")
    
    # Install requirements
    if not run_command("pip install -r requirements.txt", "Installing Python dependencies"):
        return False
    
    return True

def validate_environment() -> bool:
    """Validate the setup environment"""
    print("üîç Validating environment setup...")
    
    # Check if .env file exists
    if not Path(".env").exists():
        print("‚ùå .env file not found")
        return False
    
    # Test basic imports
    try:
        sys.path.insert(0, str(Path.cwd()))
        from config.settings import settings
        from agents.universal_agent import universal_agent
        from api.main import app
        print("‚úÖ Basic imports working")
    except Exception as e:
        print(f"‚ùå Import error: {e}")
        return False
    
    return True

def main():
    """Main setup function"""
    print("üöÄ Azure Universal RAG - Local Environment Setup")
    print("Setting up real Azure services for local development")
    print("=" * 60)
    
    # Step 1: Check Azure CLI
    if not check_azure_cli():
        return 1
    
    # Step 2: Get subscription info
    subscription_info = get_subscription_info()
    if not subscription_info:
        print("‚ùå Failed to get Azure subscription information")
        return 1
    
    print(f"‚úÖ Using subscription: {subscription_info['name']} ({subscription_info['id']})")
    
    # Step 3: Set up Python environment
    if not setup_python_environment():
        print("‚ùå Failed to set up Python environment")
        return 1
    
    # Step 4: Create service principal (optional, user can skip)
    create_sp = input("\n‚ùì Create new service principal for local development? (y/n): ").lower().strip()
    
    if create_sp == 'y':
        rg = input("Enter resource group name (optional, press Enter to skip): ").strip()
        resource_group = rg if rg else None
        
        sp_info = create_service_principal(subscription_info['id'], resource_group)
        if not sp_info:
            print("‚ùå Failed to create service principal")
            return 1
        
        # Step 5: Create .env file
        if not create_env_file(sp_info, subscription_info['id']):
            print("‚ùå Failed to create environment file")
            return 1
        
        print("\n‚ö†Ô∏è  SECURITY WARNING:")
        print("   - Store the client secret securely")
        print("   - Add .env to .gitignore (should already be there)")
        print("   - Don't commit service principal credentials")
    
    else:
        print("‚è≠Ô∏è  Skipping service principal creation")
        print("   Make sure you have proper Azure credentials configured")
    
    # Step 6: Validate setup
    if not validate_environment():
        print("‚ùå Environment validation failed")
        return 1
    
    # Success summary
    print("\n" + "=" * 60)
    print("üéâ LOCAL ENVIRONMENT SETUP COMPLETE!")
    print("=" * 60)
    print("‚úÖ Azure CLI configured and authenticated")
    print("‚úÖ Python environment and dependencies ready")
    print("‚úÖ Project structure validated")
    
    if create_sp == 'y':
        print("‚úÖ Service principal created for local development")
        print("‚úÖ Environment file (.env) created")
    
    print("\nüöÄ NEXT STEPS:")
    print("1. Update Azure service endpoints in .env file")
    print("2. Run: python scripts/test_azure_connectivity.py")
    print("3. If connectivity tests pass, proceed with data pipeline testing")
    
    print("\nüìö DOCUMENTATION:")
    print("- Local Testing Plan: docs/development/LOCAL_TESTING_IMPLEMENTATION_PLAN.md")
    print("- Coding Standards: docs/development/CODING_STANDARDS.md")
    
    return 0

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Setup interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Unexpected error during setup: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)