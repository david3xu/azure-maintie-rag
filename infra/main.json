{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "6654254557190206704"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the environment (e.g., dev, staging, prod)"
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "principalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Principal ID for the current user (from azd auth)"
      }
    },
    "backendImageName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Backend container image - provided by azd"
      }
    },
    "frontendImageName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Frontend container image - provided by azd"
      }
    }
  },
  "variables": {
    "resourcePrefix": "maintie-rag",
    "resourceGroupName": "[format('rg-{0}-{1}', variables('resourcePrefix'), parameters('environmentName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('resourceGroupName')]",
      "location": "[parameters('location')]",
      "tags": {
        "Environment": "[parameters('environmentName')]",
        "Project": "Azure Universal RAG",
        "Purpose": "Maintenance Knowledge Graph + Vector Search + GNN Training",
        "DeployedBy": "azd",
        "CreatedDate": "2025-07-28"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "coreServices",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "resourcePrefix": {
            "value": "[variables('resourcePrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "195035026527071851"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            },
            "resourcePrefix": {
              "type": "string"
            }
          },
          "variables": {
            "config": {
              "searchSku": "basic",
              "searchReplicas": 1,
              "searchPartitions": 1,
              "storageSku": "Standard_LRS",
              "storageAccessTier": "Cool",
              "keyVaultSku": "standard",
              "logRetentionDays": 30
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))]",
              "location": "[parameters('location')]",
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "Universal RAG System Identity"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[format('log-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": "[variables('config').logRetentionDays]",
                "features": {
                  "enableLogAccessUsingOnlyResourcePermissions": true
                }
              },
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "Centralized logging for Universal RAG"
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[format('appi-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]",
                "IngestionMode": "LogAnalytics",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              },
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "Application performance monitoring"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]"
              ]
            },
            {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2023-11-01",
              "name": "[format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[variables('config').searchSku]"
              },
              "properties": {
                "replicaCount": "[variables('config').searchReplicas]",
                "partitionCount": "[variables('config').searchPartitions]",
                "hostingMode": "default",
                "publicNetworkAccess": "enabled",
                "semanticSearch": "disabled",
                "authOptions": {
                  "aadOrApiKey": {
                    "aadAuthFailureMode": "http401WithBearerChallenge"
                  }
                }
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "Vector search and full-text search for maintenance data"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[variables('config').storageSku]"
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "[variables('config').storageAccessTier]",
                "allowBlobPublicAccess": false,
                "allowSharedKeyAccess": true,
                "defaultToOAuthAuthentication": false,
                "dnsEndpointType": "Standard",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Allow"
                },
                "publicNetworkAccess": "Enabled",
                "supportsHttpsTrafficOnly": true
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "Data storage for RAG system (raw data, processed data, models)"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10)), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                },
                "deleteRetentionPolicy": {
                  "allowPermanentDelete": false,
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10)))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10)), 'default', format('maintie-{0}-rawdata', parameters('environmentName')))]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10)), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10)), 'default', format('maintie-{0}-processed', parameters('environmentName')))]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10)), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10)), 'default', format('maintie-{0}-models', parameters('environmentName')))]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10)), 'default')]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[format('kv-{0}-{1}', take(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), 12), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 8))]",
              "location": "[parameters('location')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                  "family": "A",
                  "name": "[variables('config').keyVaultSku]"
                },
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 7,
                "enablePurgeProtection": true,
                "publicNetworkAccess": "Enabled",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "bypass": "AzureServices"
                }
              },
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "Secure storage of secrets, keys, and certificates"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), 'Search Index Data Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]",
                "[resourceId('Microsoft.Search/searchServices', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), 'Search Service Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]",
                "[resourceId('Microsoft.Search/searchServices', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10)))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10))), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), 'Storage Blob Data Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]",
                "[resourceId('Microsoft.Storage/storageAccounts', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10)))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', format('kv-{0}-{1}', take(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), 12), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 8)))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', format('kv-{0}-{1}', take(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), 12), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 8))), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), 'Key Vault Secrets Officer')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', format('kv-{0}-{1}', take(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), 12), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 8)))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('principalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', format('kv-{0}-{1}', take(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), 12), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 8)))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', format('kv-{0}-{1}', take(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), 12), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 8))), parameters('principalId'), 'Key Vault Secrets Officer')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "User"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', format('kv-{0}-{1}', take(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), 12), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 8)))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('principalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))), parameters('principalId'), 'Search Index Data Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "User"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('principalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))), parameters('principalId'), 'Search Service Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "User"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('principalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10)))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10))), parameters('principalId'), 'Storage Blob Data Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "User"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10)))]"
              ]
            }
          ],
          "outputs": {
            "managedIdentityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]"
            },
            "managedIdentityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-01-31').clientId]"
            },
            "managedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-01-31').principalId]"
            },
            "searchServiceName": {
              "type": "string",
              "value": "[format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))]"
            },
            "searchEndpoint": {
              "type": "string",
              "value": "[format('https://{0}.search.windows.net/', format('srch-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10))]"
            },
            "storageAccountEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', format('st{0}{1}', take(replace(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), '_', ''), 8), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 10))), '2023-01-01').primaryEndpoints.blob]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[format('kv-{0}-{1}', take(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), 12), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 8))]"
            },
            "keyVaultEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', format('kv-{0}-{1}', take(replace(format('{0}{1}', parameters('resourcePrefix'), parameters('environmentName')), '-', ''), 12), take(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 8))), '2023-07-01').vaultUri]"
            },
            "appInsightsName": {
              "type": "string",
              "value": "[format('appi-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))]"
            },
            "appInsightsConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', format('appi-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2020-02-02').ConnectionString]"
            },
            "appInsightsInstrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', format('appi-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2020-02-02').InstrumentationKey]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-09-01').customerId]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[format('log-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))]"
            },
            "containerRegistryName": {
              "type": "string",
              "value": "not-available-in-student-subscription"
            },
            "containerRegistryEndpoint": {
              "type": "string",
              "value": "not-available-in-student-subscription"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aiServices",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "resourcePrefix": {
            "value": "[variables('resourcePrefix')]"
          },
          "managedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.managedIdentityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "812224989664419756"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            },
            "resourcePrefix": {
              "type": "string"
            },
            "managedIdentityPrincipalId": {
              "type": "string"
            }
          },
          "variables": {
            "config": {
              "miniCapacity": 1,
              "embeddingCapacity": 1,
              "location": "eastus"
            },
            "deploymentLocation": "[parameters('location')]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))]",
              "location": "[variables('deploymentLocation')]",
              "kind": "AIServices",
              "sku": {
                "name": "S0"
              },
              "properties": {
                "customSubDomainName": "[format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))]",
                "publicNetworkAccess": "Enabled"
              },
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "Azure AI Foundry multi-service - Azure for Students"
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2024-04-01-preview",
              "name": "[format('{0}/{1}', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))), 'gpt-4o-mini')]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "gpt-4o-mini",
                  "version": "2024-07-18"
                },
                "raiPolicyName": "Microsoft.Default"
              },
              "sku": {
                "name": "Standard",
                "capacity": "[variables('config').miniCapacity]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2024-04-01-preview",
              "name": "[format('{0}/{1}', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))), 'text-embedding-ada-002')]",
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "text-embedding-ada-002",
                  "version": "2"
                },
                "raiPolicyName": "Microsoft.Default"
              },
              "sku": {
                "name": "Standard",
                "capacity": "[variables('config').embeddingCapacity]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))), 'gpt-4o-mini')]",
                "[resourceId('Microsoft.CognitiveServices/accounts', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))), parameters('managedIdentityPrincipalId'), 'Cognitive Services OpenAI User')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalId": "[parameters('managedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('principalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))), parameters('principalId'), 'Cognitive Services OpenAI User')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "User"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]",
              "name": "openai-diagnostics",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            }
          ],
          "outputs": {
            "openaiAccountName": {
              "type": "string",
              "value": "[format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))]"
            },
            "openaiEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))), '2023-05-01').endpoint]"
            },
            "openaiResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', format('aif-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
            },
            "deploymentName": {
              "type": "string",
              "value": "gpt-4o-mini"
            },
            "embeddingDeploymentName": {
              "type": "string",
              "value": "text-embedding-ada-002"
            },
            "openaiLocation": {
              "type": "string",
              "value": "[variables('config').location]"
            },
            "openaiResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "dataServices",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "resourcePrefix": {
            "value": "[variables('resourcePrefix')]"
          },
          "managedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.managedIdentityPrincipalId.value]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.storageAccountName.value]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.keyVaultName.value]"
          },
          "appInsightsName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.appInsightsName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "14310889854069879074"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            },
            "resourcePrefix": {
              "type": "string"
            },
            "managedIdentityPrincipalId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "appInsightsName": {
              "type": "string"
            }
          },
          "variables": {
            "config": {
              "cosmosCapacityMode": "Serverless",
              "cosmosRU": 0
            }
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))]",
              "location": "[parameters('location')]",
              "kind": "GlobalDocumentDB",
              "properties": {
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": "[equals(parameters('environmentName'), 'production')]"
                  }
                ],
                "capabilities": "[concat(createArray(createObject('name', 'EnableGremlin')), if(equals(variables('config').cosmosCapacityMode, 'Serverless'), createArray(createObject('name', 'EnableServerless')), createArray()))]",
                "enableAutomaticFailover": "[equals(parameters('environmentName'), 'production')]",
                "enableMultipleWriteLocations": false,
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "ipRules": [],
                "enableFreeTier": false,
                "publicNetworkAccess": "Enabled"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "Knowledge graph storage using Gremlin API for maintenance relationships"
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))), format('maintie-rag-{0}', parameters('environmentName')))]",
              "properties": {
                "resource": {
                  "id": "[format('maintie-rag-{0}', parameters('environmentName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}/{2}', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))), format('maintie-rag-{0}', parameters('environmentName')), format('knowledge-graph-{0}', parameters('environmentName')))]",
              "properties": "[if(equals(variables('config').cosmosCapacityMode, 'Serverless'), createObject('resource', createObject('id', format('knowledge-graph-{0}', parameters('environmentName')), 'partitionKey', createObject('paths', createArray('/partitionKey'), 'kind', 'Hash'), 'indexingPolicy', createObject('indexingMode', 'consistent', 'includedPaths', createArray(createObject('path', '/*')), 'excludedPaths', createArray(createObject('path', '/\"_etag\"/?'))))), createObject('resource', createObject('id', format('knowledge-graph-{0}', parameters('environmentName')), 'partitionKey', createObject('paths', createArray('/partitionKey'), 'kind', 'Hash'), 'indexingPolicy', createObject('indexingMode', 'consistent', 'includedPaths', createArray(createObject('path', '/*')), 'excludedPaths', createArray(createObject('path', '/\"_etag\"/?')))), 'options', createObject('throughput', variables('config').cosmosRU)))]",
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/gremlinDatabases', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))), format('maintie-rag-{0}', parameters('environmentName')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]",
              "name": "[guid(resourceId('Microsoft.DocumentDB/databaseAccounts', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))), parameters('managedIdentityPrincipalId'), 'Cosmos DB Built-in Data Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalId": "[parameters('managedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('principalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]",
              "name": "[guid(resourceId('Microsoft.DocumentDB/databaseAccounts', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))), parameters('principalId'), 'Cosmos DB Built-in Data Contributor')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "User"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]",
              "name": "cosmos-diagnostics",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
              ]
            },
            {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2023-04-01",
              "name": "[format('ml-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))]",
              "location": "[parameters('location')]",
              "properties": {
                "friendlyName": "Azure Universal RAG ML Workspace",
                "description": "Machine Learning workspace for GNN training and inference",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
                "publicNetworkAccess": "Enabled",
                "imageBuildCompute": "[format('ml-cluster-{0}', parameters('environmentName'))]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "GNN training and inference for Universal RAG"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', format('ml-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6)))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', format('ml-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))), parameters('managedIdentityPrincipalId'), 'AzureML Data Scientist')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f6c7c914-8db3-469d-8ca1-694a8f32e121')]",
                "principalId": "[parameters('managedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', format('ml-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6)))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('principalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', format('ml-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6)))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', format('ml-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))), parameters('principalId'), 'AzureML Data Scientist')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f6c7c914-8db3-469d-8ca1-694a8f32e121')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "User"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', format('ml-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6)))]"
              ]
            }
          ],
          "outputs": {
            "cosmosAccountName": {
              "type": "string",
              "value": "[format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))]"
            },
            "cosmosEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')))), '2023-04-15').documentEndpoint]"
            },
            "cosmosResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
            },
            "cosmosGremlinEndpoint": {
              "type": "string",
              "value": "[format('wss://{0}.gremlin.cosmos.azure.com:443/', format('cosmos-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName'))))]"
            },
            "gremlinDatabaseName": {
              "type": "string",
              "value": "[format('maintie-rag-{0}', parameters('environmentName'))]"
            },
            "knowledgeGraphName": {
              "type": "string",
              "value": "[format('knowledge-graph-{0}', parameters('environmentName'))]"
            },
            "mlWorkspaceName": {
              "type": "string",
              "value": "[format('ml-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))]"
            },
            "mlWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.MachineLearningServices/workspaces', format('ml-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6)))]"
            },
            "mlWorkspaceEndpoint": {
              "type": "string",
              "value": "[format('https://{0}.api.azureml.ms', format('ml-{0}-{1}-{2}', parameters('resourcePrefix'), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6)))]"
            },
            "mlComputeClusterName": {
              "type": "string",
              "value": "[format('ml-cluster-{0}', parameters('environmentName'))]"
            },
            "mlComputeInstanceName": {
              "type": "string",
              "value": "[format('ml-instance-{0}', parameters('environmentName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "hostingServices",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourcePrefix": {
            "value": "[variables('resourcePrefix')]"
          },
          "openaiEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'aiServices'), '2022-09-01').outputs.openaiEndpoint.value]"
          },
          "searchEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.searchEndpoint.value]"
          },
          "cosmosEndpoint": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'dataServices'), '2022-09-01').outputs.cosmosEndpoint.value]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.storageAccountName.value]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.keyVaultName.value]"
          },
          "appInsightsConnectionString": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.appInsightsConnectionString.value]"
          },
          "backendImageName": {
            "value": "[parameters('backendImageName')]"
          },
          "frontendImageName": {
            "value": "[parameters('frontendImageName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2249818271957249604"
            }
          },
          "parameters": {
            "environmentName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourcePrefix": {
              "type": "string"
            },
            "openaiEndpoint": {
              "type": "string"
            },
            "searchEndpoint": {
              "type": "string"
            },
            "cosmosEndpoint": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "appInsightsConnectionString": {
              "type": "securestring"
            },
            "backendImageName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Backend container image name with tag (e.g., azure-maintie-rag/backend-prod:azd-deploy-123456)"
              }
            },
            "frontendImageName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Frontend container image name with tag (e.g., azure-maintie-rag/frontend-prod:azd-deploy-123456)"
              }
            }
          },
          "variables": {
            "config": {
              "containerCpu": "0.25",
              "containerMemory": "0.5Gi",
              "minReplicas": 0,
              "maxReplicas": 1,
              "registrySku": "Basic"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-01-01-preview",
              "name": "[format('cr{0}{1}{2}', replace(parameters('resourcePrefix'), '-', ''), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[variables('config').registrySku]"
              },
              "properties": {
                "adminUserEnabled": true,
                "anonymousPullEnabled": false,
                "dataEndpointEnabled": false,
                "encryption": {
                  "status": "disabled"
                },
                "networkRuleBypassOptions": "AzureServices",
                "policies": {
                  "exportPolicy": {
                    "status": "enabled"
                  },
                  "retentionPolicy": {
                    "status": "disabled",
                    "days": 7
                  },
                  "trustPolicy": {
                    "status": "disabled",
                    "type": "Notary"
                  }
                },
                "publicNetworkAccess": "Enabled",
                "zoneRedundancy": "Disabled"
              },
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "Container registry for Universal RAG images"
              }
            },
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2023-05-01",
              "name": "[format('cae-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "appLogsConfiguration": {
                  "destination": "log-analytics",
                  "logAnalyticsConfiguration": {
                    "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-09-01').customerId]",
                    "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-09-01').primarySharedKey]"
                  }
                },
                "zoneRedundant": "[equals(parameters('environmentName'), 'production')]"
              },
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "Container Apps hosting environment for Universal RAG"
              }
            },
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[format('ca-backend-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))]",
              "location": "[parameters('location')]",
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "Backend API service for Universal RAG",
                "azd-service-name": "backend"
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))))]": {}
                }
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', format('cae-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]",
                "configuration": {
                  "activeRevisionsMode": "Single",
                  "ingress": {
                    "external": true,
                    "targetPort": 8000,
                    "transport": "http",
                    "allowInsecure": true,
                    "traffic": [
                      {
                        "weight": 100,
                        "latestRevision": true
                      }
                    ]
                  },
                  "registries": [
                    {
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', format('cr{0}{1}{2}', replace(parameters('resourcePrefix'), '-', ''), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))), '2023-01-01-preview').loginServer]",
                      "username": "[format('cr{0}{1}{2}', replace(parameters('resourcePrefix'), '-', ''), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))]",
                      "passwordSecretRef": "container-registry-password"
                    }
                  ],
                  "secrets": [
                    {
                      "name": "app-insights-connection-string",
                      "value": "[parameters('appInsightsConnectionString')]"
                    },
                    {
                      "name": "container-registry-password",
                      "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', format('cr{0}{1}{2}', replace(parameters('resourcePrefix'), '-', ''), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))), '2023-01-01-preview').passwords[0].value]"
                    }
                  ]
                },
                "template": {
                  "containers": [
                    {
                      "image": "[if(not(empty(parameters('backendImageName'))), parameters('backendImageName'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                      "name": "backend",
                      "env": [
                        {
                          "name": "AZURE_OPENAI_ENDPOINT",
                          "value": "[parameters('openaiEndpoint')]"
                        },
                        {
                          "name": "AZURE_SEARCH_ENDPOINT",
                          "value": "[parameters('searchEndpoint')]"
                        },
                        {
                          "name": "AZURE_COSMOS_ENDPOINT",
                          "value": "[parameters('cosmosEndpoint')]"
                        },
                        {
                          "name": "AZURE_STORAGE_ACCOUNT",
                          "value": "[parameters('storageAccountName')]"
                        },
                        {
                          "name": "AZURE_KEY_VAULT_NAME",
                          "value": "[parameters('keyVaultName')]"
                        },
                        {
                          "name": "AZURE_CLIENT_ID",
                          "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-01-31').clientId]"
                        },
                        {
                          "name": "AZURE_TENANT_ID",
                          "value": "[subscription().tenantId]"
                        },
                        {
                          "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                          "secretRef": "app-insights-connection-string"
                        },
                        {
                          "name": "PORT",
                          "value": "8000"
                        }
                      ],
                      "resources": {
                        "cpu": "[json(variables('config').containerCpu)]",
                        "memory": "[variables('config').containerMemory]"
                      }
                    }
                  ],
                  "scale": {
                    "minReplicas": "[variables('config').minReplicas]",
                    "maxReplicas": "[variables('config').maxReplicas]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', format('cae-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', format('cr{0}{1}{2}', replace(parameters('resourcePrefix'), '-', ''), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6)))]"
              ]
            },
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "[format('ca-frontend-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))]",
              "location": "[parameters('location')]",
              "tags": {
                "Environment": "[parameters('environmentName')]",
                "Purpose": "Frontend UI service for Universal RAG",
                "azd-service-name": "frontend"
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))))]": {}
                }
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', format('cae-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]",
                "configuration": {
                  "activeRevisionsMode": "Single",
                  "ingress": {
                    "external": true,
                    "targetPort": 3000,
                    "transport": "http",
                    "allowInsecure": true,
                    "traffic": [
                      {
                        "weight": 100,
                        "latestRevision": true
                      }
                    ]
                  },
                  "registries": [
                    {
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', format('cr{0}{1}{2}', replace(parameters('resourcePrefix'), '-', ''), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))), '2023-01-01-preview').loginServer]",
                      "username": "[format('cr{0}{1}{2}', replace(parameters('resourcePrefix'), '-', ''), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))]",
                      "passwordSecretRef": "container-registry-password"
                    }
                  ],
                  "secrets": [
                    {
                      "name": "container-registry-password",
                      "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', format('cr{0}{1}{2}', replace(parameters('resourcePrefix'), '-', ''), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))), '2023-01-01-preview').passwords[0].value]"
                    }
                  ]
                },
                "template": {
                  "containers": [
                    {
                      "image": "[if(not(empty(parameters('frontendImageName'))), parameters('frontendImageName'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                      "name": "frontend",
                      "env": [
                        {
                          "name": "VITE_API_URL",
                          "value": "[format('https://{0}', reference(resourceId('Microsoft.App/containerApps', format('ca-backend-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-05-01').configuration.ingress.fqdn)]"
                        },
                        {
                          "name": "PORT",
                          "value": "3000"
                        }
                      ],
                      "resources": {
                        "cpu": "[json(variables('config').containerCpu)]",
                        "memory": "[variables('config').containerMemory]"
                      }
                    }
                  ],
                  "scale": {
                    "minReplicas": "[variables('config').minReplicas]",
                    "maxReplicas": "[variables('config').maxReplicas]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/containerApps', format('ca-backend-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]",
                "[resourceId('Microsoft.App/managedEnvironments', format('cae-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', format('cr{0}{1}{2}', replace(parameters('resourcePrefix'), '-', ''), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6)))]"
              ]
            }
          ],
          "outputs": {
            "containerRegistryName": {
              "type": "string",
              "value": "[format('cr{0}{1}{2}', replace(parameters('resourcePrefix'), '-', ''), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))]"
            },
            "containerRegistryLoginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', format('cr{0}{1}{2}', replace(parameters('resourcePrefix'), '-', ''), parameters('environmentName'), substring(uniqueString(resourceGroup().id, parameters('resourcePrefix'), parameters('environmentName')), 0, 6))), '2023-01-01-preview').loginServer]"
            },
            "backendAppUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.App/containerApps', format('ca-backend-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-05-01').configuration.ingress.fqdn)]"
            },
            "frontendAppUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.App/containerApps', format('ca-frontend-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName'))), '2023-05-01').configuration.ingress.fqdn)]"
            },
            "containerEnvironmentId": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/managedEnvironments', format('cae-{0}-{1}', parameters('resourcePrefix'), parameters('environmentName')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'aiServices')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'dataServices')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    }
  ],
  "outputs": {
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[variables('resourceGroupName')]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'aiServices'), '2022-09-01').outputs.openaiEndpoint.value]"
    },
    "AZURE_OPENAI_DEPLOYMENT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'aiServices'), '2022-09-01').outputs.deploymentName.value]"
    },
    "AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'aiServices'), '2022-09-01').outputs.embeddingDeploymentName.value]"
    },
    "AZURE_SEARCH_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.searchEndpoint.value]"
    },
    "AZURE_SEARCH_INDEX": {
      "type": "string",
      "value": "[format('maintie-{0}-index', parameters('environmentName'))]"
    },
    "AZURE_COSMOS_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'dataServices'), '2022-09-01').outputs.cosmosEndpoint.value]"
    },
    "AZURE_COSMOS_DATABASE_NAME": {
      "type": "string",
      "value": "[format('maintie-rag-{0}', parameters('environmentName'))]"
    },
    "AZURE_COSMOS_GRAPH_NAME": {
      "type": "string",
      "value": "[format('knowledge-graph-{0}', parameters('environmentName'))]"
    },
    "AZURE_STORAGE_ACCOUNT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.storageAccountName.value]"
    },
    "AZURE_STORAGE_CONTAINER": {
      "type": "string",
      "value": "[format('maintie-{0}-data', parameters('environmentName'))]"
    },
    "AZURE_KEY_VAULT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.keyVaultName.value]"
    },
    "AZURE_ML_WORKSPACE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'dataServices'), '2022-09-01').outputs.mlWorkspaceName.value]"
    },
    "AZURE_ML_WORKSPACE_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'dataServices'), '2022-09-01').outputs.mlWorkspaceId.value]"
    },
    "AZURE_ML_WORKSPACE_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'dataServices'), '2022-09-01').outputs.mlWorkspaceEndpoint.value]"
    },
    "AZURE_ML_COMPUTE_CLUSTER_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'dataServices'), '2022-09-01').outputs.mlComputeClusterName.value]"
    },
    "AZURE_ML_COMPUTE_INSTANCE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'dataServices'), '2022-09-01').outputs.mlComputeInstanceName.value]"
    },
    "AZURE_ML_RESOURCE_GROUP": {
      "type": "string",
      "value": "[variables('resourceGroupName')]"
    },
    "AZURE_APP_INSIGHTS_CONNECTION_STRING": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.appInsightsConnectionString.value]"
    },
    "AZURE_LOG_ANALYTICS_WORKSPACE_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
    },
    "SERVICE_BACKEND_URI": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'hostingServices'), '2022-09-01').outputs.backendAppUrl.value]"
    },
    "SERVICE_FRONTEND_URI": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'hostingServices'), '2022-09-01').outputs.frontendAppUrl.value]"
    },
    "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'hostingServices'), '2022-09-01').outputs.containerRegistryLoginServer.value]"
    },
    "AZURE_CONTAINER_ENVIRONMENT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'hostingServices'), '2022-09-01').outputs.containerEnvironmentId.value]"
    },
    "AZURE_CLIENT_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'coreServices'), '2022-09-01').outputs.managedIdentityClientId.value]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "AZURE_SUBSCRIPTION_ID": {
      "type": "string",
      "value": "[subscription().subscriptionId]"
    }
  }
}